#include "Graphics4D.h"
#include "GeneratedConsts.h"


int main() {
    
    // this is required for programming without manually entering bootloader
    stdio_init_all(); // must also enable usb stdio in CMakeLists
    // otherwise, manually put the board to bootloader mode
    
    gfx.Initialize();
    gfx.ScreenMode(PROJECT_ORIENTATION);
    gfx.Contrast(8);
    
    touch.Initialize(); // uncomment when using touch
    
    // Uncomment when using widgets
    SetupMedia(); // autogenerated helper function used to load graphical widgets
    
    // put your setup code here, to run once:
    uint8_t points;
    uint touched;
    uint8_t status;
    volatile uint16_t count=0;
    volatile uint8_t c_print=0;
    size_t charsPrinted;

    gfx.SetFontBackground(BLACK, true);
    gfx.SetFont(Font4);
    gfx.SetFontForeground(CYAN);

    img.ShowForm(hndl, iForm0);
    img.Show(hndl, iPanelA0); // Show iPanelA0
    TextArea4D tarea1 = gfx.CreateTextArea(415, 15, 785, 385, RED, 0xDEFB);
    //gfx.MoveTo(400, 0);
    gfx.MoveRel(0, 16);
    //gfx.ClipWindow(20, 20, 380, 380);
    

    while (true) {
        points = touch.GetPoints();
        status = touch.GetStatus();
        if (points > 0) {
            if (c_print%28==0 && c_print>0) {
                c_print=0;
                gfx.RectangleFilled(0, 0, 400, 480, 0xB283, true);
                gfx.RectangleFilled(415, 15, 785, 465, 0xDEFB, true);
                gfx.MoveRel(0, 16);
                //gfx.MoveTo(0, 16)
            }
            count++;
            c_print++;
            gfx.printf("%d Touch\r\n", count);
            //gfx.MoveRel(400, 0);
            charsPrinted = gfx.printf(tarea1, "%d  Touch\r\n", count);
            busy_wait_ms(100);
        }
    }
}